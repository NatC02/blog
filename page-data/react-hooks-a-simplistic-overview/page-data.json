{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-hooks-a-simplistic-overview/","result":{"data":{"site":{"siteMetadata":{"title":"Natan Ceballos Blog"}},"markdownRemark":{"id":"128aa2ae-91e0-5509-b68c-49f3223019e2","excerpt":"Within the past few months I’ve started to understand the react eco-system more. And found myself using React Hooks. I was inspired to write this blog when I…","html":"<p>Within the past few months I’ve started to understand the react eco-system more.</p>\n<p>And found myself using React Hooks. I was inspired to write this blog when I used a <code class=\"language-text\">useState</code> hook to detect browser width and conditionally render a ui component some time ago.</p>\n<p>So I thought to myself, “What I cannot create [&#x26;&#x26; explain], I do not understand.”</p>\n<p> React Hooks are completely optional to use, so developers can choose what should be refactored to use them. </p>\n<p>I think that React Hooks can “abstract away” how React classes work (along with the <code class=\"language-text\">this</code> keyword in Javascript). It’s similar to <a href=\"https://youtu.be/0_AQZbvxH2s?t=368\" title=\"Youtuber explaining part of my idea of this abstracting away\">this</a> (6:08 - 6:23) perspective. But at the end of the day, its an alternative way to build dynamic components and complex logic in React. </p>\n<p>I’m only going to cover the most commonly used hooks. Enjoy!</p>\n<p>These are:</p>\n<ul>\n<li><strong>useState()</strong></li>\n<li><strong>useEffect()</strong></li>\n<li><strong>useContext()</strong></li>\n<li><strong>useEffect()</strong></li>\n</ul>\n<h2><code class=\"language-text\">useState()</code></h2>\n<p>With the <code class=\"language-text\">useState()</code> hook, you can take a functional component and update it’s state without converting it to a class.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>pigeons<span class=\"token punctuation\">,</span> setPigeons<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPigeons</span><span class=\"token punctuation\">(</span>pigeons <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> \n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> \n          <span class=\"token constant\">I</span> have <span class=\"token punctuation\">{</span>pigeons<span class=\"token punctuation\">}</span> <span class=\"token keyword\">in</span> my backyard<span class=\"token punctuation\">.</span> \n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> \n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Give me more pigeons<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first variable of the <code class=\"language-text\">useState()</code> hook starts with an initial state, in this case it’s called <code class=\"language-text\">pigeons</code> and it’s being returned on the first render. The second variable acts as a function that updates the first variable, thus updating the state of the component. </p>\n<p>In the example above, when the button is clicked, the state of the pigeons will be updated by +1.</p>\n<hr/>\n<h2><code class=\"language-text\">useEffect()</code></h2>\n<p>Like the <code class=\"language-text\">useState()</code> hook, we start by setting our initial state. In this instance the, <code class=\"language-text\">useEffect()</code> hook will fire off and update ON the first render. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useState<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Define State</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> <span class=\"token string\">'surname'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>title<span class=\"token punctuation\">,</span> setTitle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BIO'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n    <span class=\"token comment\">// Call the use effect hook</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">FirstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Shedrack'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">surname</span><span class=\"token operator\">:</span> <span class=\"token string\">'Akintayo'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// pass in an empty array as a second argument</span>\n    \n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Surname<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">.</span>surname<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>We have some jsx props inside the initial variables of the hook because once the <code class=\"language-text\">useEffect()</code> hook is called  it’s going to update the state to use the jsx props. Passing the empty array for <code class=\"language-text\">useEffect()</code> will only run it once without re-rendering on every change within the tree. </p>\n<hr/>\n<h2><code class=\"language-text\">useContext()</code></h2>\n<p>This hook accepts a context object, what it returns is the result of React.createContext (the context value).\nThe purpose behind <code class=\"language-text\">useContext()</code> is to share data throughout the app without using props and passing those down throughout the application.</p>\n<p><strong>Below we are using the Context API, NOT the <code class=\"language-text\">useContext()</code> hook.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> NumberContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>NumberContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">45</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Display <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NumberContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>NumberContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>The answer to the question is <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>NumberContext<span class=\"token punctuation\">.</span>Consumer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">NumberContext</code> is the context object and within this object we have access to two values that are returned. These are the consumer and the provider. The provider is the value that is being passed down to the children. The consumer is the value that is being passed down to the parent. </p>\n<p>The provider is then passed a value of 45. The consumer is then passed the value of the provider.</p>\n<p><strong>Below we are using the <code class=\"language-text\">useContext()</code> hook.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// old code from before goes here</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>NumberContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>The answer is <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here the <code class=\"language-text\">useContext()</code> hook is called and then passes the context object created and then the value from it is rendered.</p>\n<hr/>\n<h2><code class=\"language-text\">useReducer()</code></h2>\n<p>The <code class=\"language-text\">useReducer()</code> hook is a combination of <code class=\"language-text\">useState()</code> and <code class=\"language-text\">useEffect()</code> that allows you to manage state in a functional component.</p>\n<p>It takes in a reducer function and an initial state. Then it returns a state and a dispatch function by using array destructuring.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialArg<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<hr/>\n<p>Hope you enjoyed reading how the most common React Hooks work!</p>\n<p>Below you can find my inspiration and more information about React Hooks, highly suggest them!</p>\n<h2>Resources:</h2>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\">React Docs</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2020/04/react-hooks-api-guide/#useReducer\">Getting started with the React Hooks API</a></li>\n<li><a href=\"https://www.robinwieruch.de/react-hooks/\">What are React Hooks</a></li>\n<li><a href=\"https://blog.ohansemmanuel.com/react-hooks-documentation-easy-to-read/#useState\">React Hooks Documentation</a></li>\n</ul>","frontmatter":{"title":"React Hooks, a simplistic overview","date":"January 09, 2022","description":"How do React Hooks work? What are they good for? Why should I use them? How do I use them? This and more... I explain with a simplistic overview."}}},"pageContext":{"slug":"/react-hooks-a-simplistic-overview/","previous":{"fields":{"slug":"/code-highlighting-post/"},"frontmatter":{"title":"Syntax Highlighting Post"}},"next":null}},"staticQueryHashes":["2915217059","805692932"]}